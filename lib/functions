#!/bin/bash
#
# Copyright (c) 2016 Western Digital Corporation or its affiliates
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc.

have_brd() {
    modinfo brd >/dev/null 2>&1
}

vdev_path=(/dev/ram0 /dev/ram1)
scsi_serial=(ramdisk1 ramdisk2)
mountpoint=("$PWD/mnt1" "$PWD/mnt2")
memtotal=$(sed -n 's/^MemTotal:[[:blank:]]*\([0-9]*\)[[:blank:]]*kB$/\1/p' /proc/meminfo)
if have_brd; then
    ramdisk_size=$((memtotal*(1024/16)))  # in bytes
else
    ramdisk_size=$(($(</sys/class/block/ram0/size) * 512))  # in bytes
fi
options=()
debug=
filesystem_type=ext4
target_framework=lio
nvme_subsysnqn="nvme-test"
nvme_port=7777
runtime=600
tests=()

usage() {
    echo "Usage: $1 [-d] [-f <filesystem type>] [-n] [-r <runtime>] [-s] [-t <test>]* [-x]"
    exit 1
}

parse_cmdline() {
    while [ "${1#-}" != "$1" ]; do
	case "${1#-}" in
	    d) options+=($1);    debug=1;;
	    f) options+=($1 $2); filesystem_type=$2; shift;;
	    n) options+=($1);    nvme=1;;
	    r) options+=($1 $2); runtime=$2; shift;;
	    s) options+=($1);    target_framework=scst;;
	    t) options+=($1 $2); tests+=($2); shift;;
	    x) options+=($1);    trace=1; shift;;
	    *) usage "$(dirname "$0")";;
	esac
	shift
    done

    [ $# = 0 ] || usage "$(dirname "$0")"
}

use_blk_mq() {
    local dm_mode=$1 scsi_mode=$2 login_params=$3

    log_out &&
    remove_mpath_devs &&
    if [ -e /sys/module/dm_mod/parameters/use_blk_mq ]; then
	echo "$dm_mode"   > /sys/module/dm_mod/parameters/use_blk_mq &&
	echo "$scsi_mode" > /sys/module/scsi_mod/parameters/use_blk_mq
    fi &&
    log_in "$login_params"
}

get_ipv4_addr() {
    ip -4 -o addr show dev "$1" |
	sed -n 's/.*[[:blank:]]inet[[:blank:]]*\([^[:blank:]/]*\).*/\1/p'
}

get_ipv6_addr() {
    ip -6 -o addr show dev "$1" |
	sed -n 's/.*[[:blank:]]inet6[[:blank:]]*\([^[:blank:]/]*\).*/\1/p'
}

# Make the SRP initiator driver log in to each SRP target port.
srp_log_in() {
    local add_param=$1 d dest gid ibdev ioc_guid port

    ioc_guid=$(</sys/module/ib_srpt/parameters/srpt_service_guid)
    for d in /sys/class/infiniband_mad/umad*; do
	[ -e "$d" ] || continue
	sysfsdir=/sys/class/infiniband_mad/$(basename "$d")
	ibdev=$(<"$sysfsdir/ibdev")
	port=$(<"$sysfsdir/port")
	gid=$(<"/sys/class/infiniband/$ibdev/ports/$port/gids/0")
	gid=${gid//:}
	for p in /sys/class/infiniband_srp/*; do
	    [ -e "$p" ] || continue
	    {
		echo "id_ext=$ioc_guid,ioc_guid=$ioc_guid,dgid=$gid,pkey=7fff,service_id=$ioc_guid,$add_param" >"$p/add_target"
	    } 2>/dev/null
	done
    done

    for d in /sys/class/net/*; do
	[ -e "$d" ] || continue
	for p in /sys/class/infiniband_srp/*; do
	    [ -e "$p" ] || continue
	    a=$(get_ipv4_addr "$(basename "$d")")
	    [ -n "$a" ] || continue
	    dest="${a}:5555"
	    {
		echo "id_ext=$ioc_guid,ioc_guid=$ioc_guid,dest=$dest" >"$p/add_target"
	    } 2>/dev/null
	done
    done
}

# Tell the SRP initiator driver to log out.
srp_log_out() {
    local p

    if [ -e /sys/class/srp_remote_ports ]; then
	for p in /sys/class/srp_remote_ports/*; do
	    [ -e "$p" ] && echo 1 >"$p/delete" &
	done
    fi
    wait
}

is_number() {
    [ "$1" -eq "0$1" ] 2>/dev/null
}

# Check whether a device is an RDMA device. An example argument:
# /sys/devices/pci0000:00/0000:00:03.0/0000:04:00.0
is_rdma_device() {
    local d i inode1 inode2

    inode1=$(stat -c %i "$1")
    # echo "inode1 = $inode1"
    for i in /sys/class/infiniband/*; do
	d=/sys/class/infiniband/"$(readlink "$i")"
	d=$(dirname "$(dirname "$d")")
	inode2=$(stat -c %i "$d")
	# echo "inode2 = $inode2"
	if [ "$inode1" = "$inode2" ]; then
	    return
	fi
    done
    false
}

# Lists RDMA network interface names, e.g. ib0 ib1
rdma_network_interfaces() {
    (
	cd /sys/class/net &&
	    for i in *; do
		[ -e "$i" ] || continue
		[ -L "$i/device" ] || continue
		d=$(readlink "$i/device" 2>/dev/null)
		if [ -n "$d" ] && is_rdma_device "$i/$d"; then
		    echo "$i"
		fi
	    done
    )
}

nvme_log_in() {
    local i ipv4_addr

    [ -c /dev/nvme-fabrics ] &&
	for i in $(rdma_network_interfaces); do
	    ipv4_addr=$(get_ipv4_addr "$i")
	    if [ -n "${ipv4_addr}" ]; then
		echo -n "transport=rdma,traddr=${ipv4_addr},trsvcid=${nvme_port},nqn=$nvme_subsysnqn" > /dev/nvme-fabrics
	    fi
	done &&
	echo reconfigure | multipathd -k >&/dev/null
}

nvme_log_out() {
    local c

    for c in /sys/class/nvme-fabrics/ctl/*/delete_controller; do
	[ -e "$c" ] && echo 1 > "$c" &
    done
    wait
}

log_in() {
    local srp_params=${1#srp_params=}

    if [ -n "$nvme" ]; then
	nvme_log_in
    else
	srp_log_in "${srp_params}"
    fi
}

log_out() {
    if [ -n "$nvme" ]; then
	nvme_log_out
    else
	srp_log_out
    fi
}

held_by() {
    local d e dev=$1

    while [ -L "$dev" ]; do
	dev=$(realpath "$dev")
    done
    dev=${dev%/dev/}
    for d in /sys/class/block/*/holders/*; do
	[ -e "$d" ] || continue
	e=$(basename "$d")
	if [ "$e" = "$dev" ]; then
	    echo "/dev/$(basename "$(dirname "$(dirname "$d")")")"
	fi
    done
}

simulate_network_failure_loop() {
    local d

    while :; do
	sleep 5
	if [ -n "$nvme" ]; then
	    for d in $(held_by "$dev"); do
		echo 1 >"$d/device/reset_controller"
	    done
	else
	    log_out
	    sleep 5
	    log_in ""
	fi
    done
}

stop_bdev_users() {
    [ -n "$1" ] || return $?
    lsof -F p "$1" 2>/dev/null | while read -r line; do
        p="${line#p}"
        if [ "$p" != "$line" ]; then
	    echo -n " (pid $p)"
	    kill -9 "$p"
        fi
    done
}

# RHEL 6 dmsetup only accepts mpath<n> as argument, hence this function.
dev_to_mpath() {
    local d e mm

    if [ -h "$1" ]; then
	e=$(readlink -f "$1")
    else
	e="$1"
    fi
    mm=$(stat -c %t:%T "$e")

    for d in /dev/mapper/mpath*; do
	if [ -h "$d" ]; then
	    e=$(readlink -f "$d")
	else
	    e="$d"
	fi
	if [ "$(stat -c %t:%T "$e")" = "$mm" ]; then
	    basename "$d"
	    return 0
	fi
    done
    return 1
}

remove_mpath_dev() {
    local dm i output

    dm=$(dev_to_mpath "$1")
    dmsetup message "$dm" 0 fail_if_no_path
    for ((i=10;i>0;i--)); do
	if [ ! -e "/dev/mapper/$dm" ] ||
	       output=$(dmsetup remove "$dm" 2>&1); then
	    echo "done"
	    break
	fi
	echo "$output; retrying"
	stop_bdev_users "$dm"
	sleep .1
    done
    if [ $i = 0 ]; then
	echo "failed"
	return 1
    fi
}

remove_srp_mpath_devs() {
    (
	cd /sys/class/scsi_host &&
	    for p in /sys/class/srp_remote_ports/*; do
		[ -e "$p" ] || continue
		h="${p##*/}"; h="${h#port-}"; h="${h%:1}"
		for d in /sys/class/scsi_device/${h}:*/device/block/*; do
		    [ -e "$d" ] || continue
		    s=$(dirname "$(dirname "$(dirname "$d")")")
		    b=$(basename "$d")
		    for h in /sys/class/block/$b/holders/*; do
			[ -e "$h" ] || continue
			dm=/dev/$(basename "$h")
			echo -n "SRP LUN $s / $b: removing $dm: "
			remove_mpath_dev "$dm" || [ -z "$debug" ] || return 1
		    done
		done
	    done
    )
    # Find all multipaths with one or more deleted devices and remove these
    dmsetup table | while read -r mpdev fs ls type def; do
	echo "$fs $ls" >/dev/null
	if [ "$type" = multipath ]; then
	    for d in $def; do
		if [ "${d/://}" != "$d" ]; then
		    { grep -qw "$d" /sys/class/block/*/dev ||
			    echo "${mpdev%:}"; } 2>/dev/null
		fi
	    done
	fi
    done |
	sort -u |
	while read -r mpdev; do
	    mpdev="/dev/mapper/$mpdev"
	    echo -n "removing $mpdev: "
	    remove_mpath_dev "$mpdev" || [ -z "$debug" ] || return 1
	done
    return 0
}

remove_nvme_mpath_devs() {
    local dm h

    for h in /sys/class/block/nvme*/holders/*; do
	[ -e "$h" ] || continue
	d=$(basename "$(dirname "$(dirname "$h")")")
	dm=/dev/$(basename "$h")
	echo -n "NVME dev $d: removing $dm: "
	dmsetup remove "$(dev_to_mpath "$dm")" && echo "done"
    done
}

remove_mpath_devs() {
    if [ -n "$nvme" ]; then
	remove_nvme_mpath_devs
    else
	remove_srp_mpath_devs
    fi
}

unload_module() {
    local m=$1

    if [ -e "/sys/module/$m" ]; then
	modprobe -r "$m"
    fi
}

# Load the SRP initiator driver with kernel module parameters $1..$n.
start_srp() {
    modprobe scsi_transport_srp
    modprobe ib_srp "$@" dyndbg=+pmf || return $?
}

# Unload the SRP initiator driver.
stop_srp() {
    local i

    srp_log_out
    remove_srp_mpath_devs || return $?
    for ((i=20;i>=0;i--)); do
	unload_module ib_srp >/dev/null 2>&1 && break
	sleep .1
    done
    if [ -e /sys/module/ib_srp ]; then
	echo "Error: unloading kernel module ib_srp failed"
	return 1
    fi
    unload_module scsi_transport_srp || return $?
    echo "Unloaded the ib_srp kernel module"
}

start_nvme_client() {
    modprobe nvme dyndbg=+pmf &&
	modprobe nvme-core dyndbg=+pmf &&
	modprobe nvme-fabrics dyndbg=+pmf &&
	modprobe nvme-rdma dyndbg=+pmf
}

stop_nvme_client() {
    unload_module nvme_rdma &&
    unload_module nvme
}

start_client() {
    local srp_params=${1#srp_params=}

    if [ -n "$nvme" ]; then
	start_nvme_client
    else
	# shellcheck disable=SC2086
	start_srp ${srp_params}
    fi
}

stop_client() {
    if [ -n "$nvme" ]; then
	stop_nvme_client
    else
	stop_srp
    fi
}

# Load the configfs kernel module and mount it.
mount_configfs() {
    if [ ! -e /sys/module/configfs ]; then
	modprobe configfs || return $?
    fi
    if ! mount | grep -qw configfs; then
	mount -t configfs none /sys/kernel/config || return $?
    fi
}

# Associate the LIO device with name $1/$2 with file $3 and SCSI serial $4.
configure_lio_vdev() {
    local dirname=$1 vdev=$2 path=$3 serial=$4

    (
	cd /sys/kernel/config/target/core &&
	    mkdir "$dirname" &&
	    cd "$dirname" &&
	    mkdir "$vdev" &&
	    cd "$vdev" &&
	    if [ -b "$path" ]; then
		echo "udev_path=$path," >control
	    else
		size=$(stat -c %s "${path}") &&
		    [ "$size" -gt 0 ] &&
		    echo "fd_dev_name=$path,fd_dev_size=$size," >control
	    fi &&
	    echo "${serial}" >wwn/vpd_unit_serial &&
	    echo 1 > enable
    )
}

lio_scsi_mpath_id() {
    local i=$1 hs

    is_number "$i" || return $?
    hs=$(echo -n "${scsi_serial[i]}" | od -v -tx1 -w99 |
		{ read -r offset bytes;
		  echo "${bytes// }";
		  echo "$offset" > /dev/null
		})
    while [ ${#hs} -lt 25 ]; do
	hs="${hs}0"
    done
    # See also spc_emulate_evpd_83() in drivers/target/target_core_spc.c.
    echo "36001405$hs"
}

scst_scsi_mpath_id() {
    local i=$1

    is_number "$i" || return $?
    echo "2$(echo -n "${scsi_serial[$i]}" | od -tx1 -N8 | sed 's/^[0-9]*[[:blank:]]*//;s/[[:blank:]]//g')"
}

scsi_mpath_id() {
    case "$target_framework" in
	lio)  lio_scsi_mpath_id "$@";;
	scst) scst_scsi_mpath_id "$@";;
	*)    false;;
    esac || return $?
}

get_nvme_bdev() {
    local i=$1 j=0

    for d in /sys/class/nvme-fabrics/ctl/*/*/device; do
	[ -d "$d" ] || continue
	if [ $j -ge "$i" ]; then
	    echo "/dev/$(basename "$(dirname "$d")")"
	    return 0
	fi
	((j++))
    done
    return 1
}

# Get a the uuid or wwid of block device number $1 with $1 >= 0. See also
# the bin/getuid_callout script.
get_bdev_uid() {
    local i=$1

    is_number "$i" || return $?
    if [ -n "$nvme" ]; then
	bdev=$(get_nvme_bdev "$i") || return $?
	wwid=$(<"/sys/block/${bdev#/dev/}/wwid")
	wwid=${wwid#nvme.0000-}
	echo "${wwid%-4c696e75780000000000000000000000000000000000000000000000000000000000000000000000-00000001}"
    else
	scsi_mpath_id "$i"
    fi
}

# Get a /dev/... path that points at dm device number $1 with $1 >= 0.
get_bdev() {
    local dev realdev i=$1

    is_number "$i" || return $?
    echo reconfigure | multipathd -k >&/dev/null
    dev="/dev/disk/by-id/dm-uuid-mpath-$(get_bdev_uid "$i")" || return $?
    for ((j=0;j<50;j++)); do
	[ -e "$dev" ] && break
	sleep .1
    done
    if [ ! -e "$dev" ]; then
	echo "$dev: not found" >&2
	return 1
    fi
    if [ ! -L "$dev" ]; then
	echo "$dev: not a soft link" >&2
	return 1
    fi
    realdev=$(readlink "$dev" 2>/dev/null || echo "?")
    echo "Using $dev -> ${realdev}" >&2
    #echo mq-deadline > /sys/class/block/$(basename "$realdev")/queue/scheduler
    echo none > "/sys/class/block/$(basename "$realdev")/queue/scheduler"
    echo "$dev"
}

# Configure zero or more target ports such that these accept connections from
# zero or more initiator ports. Target and initiator port lists are separated
# by "--".
configure_target_ports() {
    local i ini initiators target_port target_ports

    target_ports=()
    while [ $# -gt 0 ]; do
	if [ "$1" = "--" ]; then
	    shift
	    break
	fi
	target_ports+=("$1")
	shift
    done

    initiators=()
    while [ $# -gt 0 ]; do
	initiators+=("$1")
	shift
    done

    for target_port in "${target_ports[@]}"; do
	mkdir "$target_port" || return $?
	[ -e "$target_port" ] || continue
	#echo "$target_port"
	mkdir "$target_port/$target_port" || continue
	i=0
	for v in "${vdev[@]}"; do
	    mkdir "$target_port/$target_port/lun/lun_$i" || return $?
	    (
		cd "$target_port/$target_port/lun/lun_$i" &&
		    ln -s "../../../../../core/$v"
	    ) || return $?
	    i=$((i+1))
	done
	for ini in "${initiators[@]}"; do
	    (
		cd "$target_port/$target_port/acls" &&
		    mkdir "${ini}" &&
		    cd "${ini}" &&
		    for ((i = 0; i < ${#vdev[@]}; i++)) do
			(
			    mkdir lun_$i &&
				cd lun_$i &&
				ln -s ../../../lun/lun_$i
			) || return $?
		    done
	    ) || return $?
	    echo 1 >"$target_port/$target_port/enable"
	done
    done
}

all_primary_gids() {
    find /sys/devices -name infiniband | while read -r p; do
        cat "$p"/*/ports/*/gids/0
    done
}

# Load LIO and configure the SRP target driver and LUNs
start_lio_srpt() {
    local b d hca i m p r vdev

    target_guids=($(all_primary_gids | sed 's/^fe80:0000:0000:0000://'))
    target_gids=($(all_primary_gids | sed 's/^/0x/;s/://g'))
    ini_guids=($(all_primary_gids | sed 's/^fe80:0000:0000:0000://'))
    ini_gids=($(all_primary_gids | sed 's/^fe8/0x000/;s/://g'))
    mount_configfs || return $?
    modprobe target_core_mod || return $?
    modprobe target_core_iblock || return $?
    insmod "/lib/modules/$(uname -r)/kernel/drivers/infiniband/ulp/srpt/ib_srpt.ko" srp_max_req_size=4200 dyndbg=+pmf || return $?
    i=0
    for r in "${vdev_path[@]}"; do
	if [ -b "$r" ]; then
	    oflag=oflag=direct
	else
	    oflag=
	fi
	dd if=/dev/zero of="${r}" bs=1M count=$((ramdisk_size>>20)) ${oflag} >/dev/null 2>&1 || return $?
	mkdir -p "${mountpoint[i]}"
	((i++))
    done
    vdev=(iblock_0/vdev0 iblock_1/vdev1)
    for ((i=0; i < ${#vdev[@]}; i++)); do
	d="$(dirname "${vdev[i]}")"
	b="$(basename "${vdev[i]}")"
	hs=$(lio_scsi_mpath_id "$i")
	hs=${hs#36001405}
	configure_lio_vdev "$d" "$b" "${vdev_path[i]}" "$hs" ||
	    return $?
    done
    (
	cd /sys/kernel/config/target || return $?
	mkdir srpt || return $?
	cd srpt || return $?
	configure_target_ports "${target_guids[@]}" -- "${ini_guids[@]}" || {
	    echo "Retrying with old port name format"
	    configure_target_ports "${target_gids[@]}" -- "${ini_gids[@]}"
	}
    )
}

# Unload the LIO SRP target driver.
stop_lio_srpt() {
    local hca

    mount_configfs
    for e in /sys/kernel/config/target/srpt/$hca/$hca/enable; do
	if [ -e "$e" ]; then
	    echo 0 >"$e"
	fi
    done

    rm -f /sys/kernel/config/target/srpt/*/*/acls/*/*/* >&/dev/null
    rmdir /sys/kernel/config/target/srpt/*/*/acls/*/* >&/dev/null
    rmdir /sys/kernel/config/target/srpt/*/*/acls/* >&/dev/null
    rm -f /sys/kernel/config/target/srpt/*/*/lun/*/* >&/dev/null
    rmdir /sys/kernel/config/target/srpt/*/*/lun/* >&/dev/null
    rmdir /sys/kernel/config/target/srpt/*/* >&/dev/null
    rmdir /sys/kernel/config/target/srpt/* >&/dev/null
    rmdir /sys/kernel/config/target/srpt >&/dev/null

    unload_module ib_srpt || return $?

    rmdir /sys/kernel/config/target/core/*/* >&/dev/null
    rmdir /sys/kernel/config/target/core/* >&/dev/null

    for m in ib_srpt target_core_pscsi target_core_iblock target_core_file \
		     target_core_stgt target_core_user target_core_mod
    do
	unload_module $m || return $?
    done
}

# Associate the SCST device with name $2 with handler $1, file $3 and SCSI
# serial $4.
configure_scst_vdev() {
    local handler=$1 scst_dev=$2 path=$3 serial=$4

    (
	cd "/sys/kernel/scst_tgt/handlers/$handler" &&
	    echo "add_device $scst_dev filename=$path" >mgmt &&
	    cd "$scst_dev" &&
	    echo "$serial" >t10_dev_id
    )
}

# Load the SCST SRP target driver.
start_scst_srpt() {
    local b d hca i m p r vdev

    hca=($(all_primary_gids))

    modprobe scst_vdisk || return $?
    insmod "/lib/modules/$(uname -r)/extra/ib_srpt.ko" srp_max_req_size=4200 rdma_cm_port=5555 dyndbg=+pmf || return $?
    for r in "${vdev_path[@]}"; do
	if [ -b "$r" ]; then
	    oflag=oflag=direct
	else
	    oflag=
	fi
	dd if=/dev/zero of="${r}" bs=1M count=$((ramdisk_size>>20)) ${oflag} >/dev/null 2>&1 || return $?
	mkdir -p "${mountpoint[i]}"
	((i++))
    done
    (
	cd /sys/kernel/scst_tgt/handlers/vdisk_nullio &&
	    echo add_device dummy dummy=1 >mgmt
    ) || return $?
    vdev=(vdisk_blockio/vdev0 vdisk_blockio/vdev1)
    for ((i=0; i < ${#vdev[@]}; i++)); do
	d="$(dirname "${vdev[i]}")"
	b="$(basename "${vdev[i]}")"
	configure_scst_vdev "$d" "$b" "${vdev_path[i]}" "${scsi_serial[i]}" ||
	    return $?
    done
    (
	cd /sys/kernel/scst_tgt/targets/ib_srpt || return $?
	for h in "${hca[@]}"; do
	    echo "add dummy 0" >"$h/luns/mgmt" || return $?
	    (
		cd "$h/ini_groups" &&
		    echo "create all" >mgmt &&
		    cd all
	    ) || return $?
	    i=0
	    for v in "${vdev[@]}"; do
		d="$(dirname "${vdev[i]}")"
		b="$(basename "${vdev[i]}")"
		echo "add $b $i" >"$h/ini_groups/all/luns/mgmt" || return $?
		i=$((i+1))
	    done
	    echo "add $h" >"$h/ini_groups/all/initiators/mgmt" || return $?
	    for d in /sys/class/net/*; do
		a=$(get_ipv4_addr "$(basename "$d")")
		[ -n "$a" ] || continue
		echo "add $a" >"$h/ini_groups/all/initiators/mgmt" || return $?
	    done
	    echo 1 >"$h/enabled" || return $?
	done
    ) || return $?
}

# Unload the SCST SRP target driver.
stop_scst_srpt() {
    local rc=0 m

    for m in ib_srpt scst_vdisk scst; do
	unload_module "$m" || rc=$?
    done
    return $rc
}

# Load and configure the SRP target driver
start_srpt() {
    have_brd &&
	modprobe brd rd_nr=${#vdev_path[@]} rd_size=$((ramdisk_size>>10))
    modprobe ib_uverbs
    modprobe ib_umad
    modprobe rdma_cm
    case "$target_framework" in
	lio)  start_lio_srpt;;
	scst) start_scst_srpt;;
	*)    false;;
    esac || return $?
    echo "Configured SRP target driver"
}

# Unload the SRP target driver.
stop_srpt() {
    case "$target_framework" in
	lio)  stop_lio_srpt;;
	scst) stop_scst_srpt;;
	*)    false;;
    esac || return $?
    if have_brd; then
	unload_module brd || return $?
	rm -f "${vdev_path[@]}"
    fi
    echo "Unloaded the ib_srpt kernel module"
}

configure_nvmet_port() {
    local p=$1 ipv4_addr=$2 i

    echo "Configuring $p with address $ipv4_addr as an NVMeOF target port"
    (
	cd /sys/kernel/config/nvmet/ports &&
	    for ((i=1;;i++)); do [ -e "$i" ] || break; done &&
	    mkdir "$i" &&
	    cd "$i" &&
	    echo ipv4            > addr_adrfam &&
	    echo rdma            > addr_trtype &&
	    echo -n "$ipv4_addr" > addr_traddr &&
	    echo -n ${nvme_port} > addr_trsvcid
    )
}

start_nvme_target() {
    local d i ipv4_addr nvme_dev=1

    if have_brd; then
	modprobe brd rd_nr=${#vdev_path[@]} rd_size=$((ramdisk_size>>10))
    fi &&
	modprobe nvme dyndbg=+pmf &&
	modprobe nvmet-rdma dyndbg=+pmf &&
	(
	    cd /sys/kernel/config/nvmet/subsystems &&
	    mkdir ${nvme_subsysnqn} &&
	    cd ${nvme_subsysnqn} &&
	    cd namespaces &&
	    mkdir "${nvme_dev}" &&
	    cd "${nvme_dev}" &&
	    echo 00000000-0000-0000-0000-000000000000 >device_nguid &&
	    echo -n /dev/ram0 >device_path &&
	    echo 1 >enable &&
	    cd ../.. &&
	    echo 1 >attr_allow_any_host
	) && for i in $(rdma_network_interfaces); do
	    ipv4_addr=$(get_ipv4_addr "$i")
	    if [ -n "${ipv4_addr}" ]; then
		configure_nvmet_port "$i" "${ipv4_addr}"
	    fi
	done && (
	    cd /sys/kernel/config/nvmet/ports &&
		for i in *; do
		    [ -e "$i" ] && (
			cd "$i/subsystems" &&
			    ln -s "../../../subsystems/${nvme_subsysnqn}"
		    )
		done
	)
}

stop_nvme_target() {
    local d

    (
	cd /sys/kernel/config/nvmet 2>/dev/null &&
	    rm -f -- ports/*/subsystems/* &&
	    for d in {*/*/*/*,*/*}; do
		[ -e "$d" ] && rmdir "$d"
	    done
    )
    unload_module nvmet_rdma &&
    unload_module nvmet &&
    have_brd && unload_module brd
}

start_target() {
    if [ -n "$nvme" ]; then
	start_nvme_target
    else
	start_srpt
    fi
}

stop_target() {
    if [ -n "$nvme" ]; then
	stop_nvme_target
    else
	stop_srpt
    fi
}

# Look up the block device below the filesystem on which directory $1 exists.
block_dev_of_dir() {
    df "$1" | {
	read -r header
	echo "$header" >/dev/null
	read -r blockdev rest
	echo "$blockdev"
    }
}

create_filesystem() {
    local dev=$1

    case "$filesystem_type" in
	ext4)
	    mkfs.ext4 -F -O ^has_journal -q "$dev";;
	xfs)
	    mkfs.xfs -f -q "$dev";;
	*)
	    return 1;;
    esac
}

is_mountpoint() {
    [ -n "$1" ] &&
    [ "$(block_dev_of_dir "$1")" != \
      "$(block_dev_of_dir "$(dirname "$1")")" ]
}

mount_and_check() {
    local dir last

    dir=$(for last; do :; done; echo "$last")
    mount "$@"
    if ! is_mountpoint "$dir"; then
	echo "Error: mount $* failed"
	return 1
    fi
}

unmount_and_check() {
    local m=$1

    if is_mountpoint "$m"; then
	echo "Unmounting $m from $(block_dev_of_dir "$m")"
        umount "$m"
    fi
    if is_mountpoint "$m"; then
	echo "Error: unmounting $m failed"
	return 1
    fi
}

# Test whether fio supports command-line options "$@"
test_fio_opt() {
    ! fio --name=arg-test --filename=/dev/null "$@" 2>&1 |
	grep -q 'unrecognized option'
}

run_fio() {
    local a d j opt args

    args=("$@")
    j=1
    for opt in "${args[@]}"; do
	case "$opt" in
	    --directory=*) d="${opt#--directory=}";;
	    --numjobs=*)   j="${opt#--numjobs=}";;
	esac
    done
    if [ -n "$d" ]; then
	a=$(df "$d" | grep "^/" |
		{
		    if read -r fs blocks used avail use mnt; then
			echo "$avail"
			echo "$fs $blocks $used $use $mnt" >/dev/null
		    fi
		}
	 )
	args+=(--size=$((a*1024/j - 16*1024)))
    fi
    for opt in --exitall_on_error=1 --gtod_reduce=1; do
	if test_fio_opt "$opt"; then
	    args+=("$opt")
	fi
    done
    fio "${args[@]}"
}

# To suppress shellcheck warnings
[ -n "$debug" ] || [ -n "$runtime" ] || [ -n "$trace" ] || true
